package agrar.farmer.sbuilder.service.base;

import agrar.farmer.sbuilder.model.FarmerArea;
import agrar.farmer.sbuilder.service.FarmerAreaLocalService;
import agrar.farmer.sbuilder.service.persistence.FarmerAreaPersistence;
import agrar.farmer.sbuilder.service.persistence.FarmerPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the farmer area local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link agrar.farmer.sbuilder.service.impl.FarmerAreaLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see agrar.farmer.sbuilder.service.impl.FarmerAreaLocalServiceImpl
 * @see agrar.farmer.sbuilder.service.FarmerAreaLocalServiceUtil
 * @generated
 */
public abstract class FarmerAreaLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements FarmerAreaLocalService,
        IdentifiableBean {
    @BeanReference(type = agrar.farmer.sbuilder.service.FarmerLocalService.class)
    protected agrar.farmer.sbuilder.service.FarmerLocalService farmerLocalService;
    @BeanReference(type = FarmerPersistence.class)
    protected FarmerPersistence farmerPersistence;
    @BeanReference(type = agrar.farmer.sbuilder.service.FarmerAreaLocalService.class)
    protected agrar.farmer.sbuilder.service.FarmerAreaLocalService farmerAreaLocalService;
    @BeanReference(type = FarmerAreaPersistence.class)
    protected FarmerAreaPersistence farmerAreaPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private FarmerAreaLocalServiceClpInvoker _clpInvoker = new FarmerAreaLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link agrar.farmer.sbuilder.service.FarmerAreaLocalServiceUtil} to access the farmer area local service.
     */

    /**
     * Adds the farmer area to the database. Also notifies the appropriate model listeners.
     *
     * @param farmerArea the farmer area
     * @return the farmer area that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public FarmerArea addFarmerArea(FarmerArea farmerArea)
        throws SystemException {
        farmerArea.setNew(true);

        return farmerAreaPersistence.update(farmerArea);
    }

    /**
     * Creates a new farmer area with the primary key. Does not add the farmer area to the database.
     *
     * @param id the primary key for the new farmer area
     * @return the new farmer area
     */
    @Override
    public FarmerArea createFarmerArea(long id) {
        return farmerAreaPersistence.create(id);
    }

    /**
     * Deletes the farmer area with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param id the primary key of the farmer area
     * @return the farmer area that was removed
     * @throws PortalException if a farmer area with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public FarmerArea deleteFarmerArea(long id)
        throws PortalException, SystemException {
        return farmerAreaPersistence.remove(id);
    }

    /**
     * Deletes the farmer area from the database. Also notifies the appropriate model listeners.
     *
     * @param farmerArea the farmer area
     * @return the farmer area that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public FarmerArea deleteFarmerArea(FarmerArea farmerArea)
        throws SystemException {
        return farmerAreaPersistence.remove(farmerArea);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(FarmerArea.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return farmerAreaPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link agrar.farmer.sbuilder.model.impl.FarmerAreaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return farmerAreaPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link agrar.farmer.sbuilder.model.impl.FarmerAreaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return farmerAreaPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return farmerAreaPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return farmerAreaPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public FarmerArea fetchFarmerArea(long id) throws SystemException {
        return farmerAreaPersistence.fetchByPrimaryKey(id);
    }

    /**
     * Returns the farmer area with the primary key.
     *
     * @param id the primary key of the farmer area
     * @return the farmer area
     * @throws PortalException if a farmer area with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public FarmerArea getFarmerArea(long id)
        throws PortalException, SystemException {
        return farmerAreaPersistence.findByPrimaryKey(id);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return farmerAreaPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the farmer areas.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link agrar.farmer.sbuilder.model.impl.FarmerAreaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of farmer areas
     * @param end the upper bound of the range of farmer areas (not inclusive)
     * @return the range of farmer areas
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<FarmerArea> getFarmerAreas(int start, int end)
        throws SystemException {
        return farmerAreaPersistence.findAll(start, end);
    }

    /**
     * Returns the number of farmer areas.
     *
     * @return the number of farmer areas
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getFarmerAreasCount() throws SystemException {
        return farmerAreaPersistence.countAll();
    }

    /**
     * Updates the farmer area in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param farmerArea the farmer area
     * @return the farmer area that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public FarmerArea updateFarmerArea(FarmerArea farmerArea)
        throws SystemException {
        return farmerAreaPersistence.update(farmerArea);
    }

    /**
     * Returns the farmer local service.
     *
     * @return the farmer local service
     */
    public agrar.farmer.sbuilder.service.FarmerLocalService getFarmerLocalService() {
        return farmerLocalService;
    }

    /**
     * Sets the farmer local service.
     *
     * @param farmerLocalService the farmer local service
     */
    public void setFarmerLocalService(
        agrar.farmer.sbuilder.service.FarmerLocalService farmerLocalService) {
        this.farmerLocalService = farmerLocalService;
    }

    /**
     * Returns the farmer persistence.
     *
     * @return the farmer persistence
     */
    public FarmerPersistence getFarmerPersistence() {
        return farmerPersistence;
    }

    /**
     * Sets the farmer persistence.
     *
     * @param farmerPersistence the farmer persistence
     */
    public void setFarmerPersistence(FarmerPersistence farmerPersistence) {
        this.farmerPersistence = farmerPersistence;
    }

    /**
     * Returns the farmer area local service.
     *
     * @return the farmer area local service
     */
    public agrar.farmer.sbuilder.service.FarmerAreaLocalService getFarmerAreaLocalService() {
        return farmerAreaLocalService;
    }

    /**
     * Sets the farmer area local service.
     *
     * @param farmerAreaLocalService the farmer area local service
     */
    public void setFarmerAreaLocalService(
        agrar.farmer.sbuilder.service.FarmerAreaLocalService farmerAreaLocalService) {
        this.farmerAreaLocalService = farmerAreaLocalService;
    }

    /**
     * Returns the farmer area persistence.
     *
     * @return the farmer area persistence
     */
    public FarmerAreaPersistence getFarmerAreaPersistence() {
        return farmerAreaPersistence;
    }

    /**
     * Sets the farmer area persistence.
     *
     * @param farmerAreaPersistence the farmer area persistence
     */
    public void setFarmerAreaPersistence(
        FarmerAreaPersistence farmerAreaPersistence) {
        this.farmerAreaPersistence = farmerAreaPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("agrar.farmer.sbuilder.model.FarmerArea",
            farmerAreaLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "agrar.farmer.sbuilder.model.FarmerArea");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return FarmerArea.class;
    }

    protected String getModelClassName() {
        return FarmerArea.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = farmerAreaPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
