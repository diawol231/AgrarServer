package agrar.farmer.sbuilder.model.impl;

import agrar.farmer.sbuilder.model.FarmerArea;
import agrar.farmer.sbuilder.model.FarmerAreaModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FarmerArea service. Represents a row in the &quot;agrar_farmer_FarmerArea&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link agrar.farmer.sbuilder.model.FarmerAreaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerAreaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerAreaImpl
 * @see agrar.farmer.sbuilder.model.FarmerArea
 * @see agrar.farmer.sbuilder.model.FarmerAreaModel
 * @generated
 */
public class FarmerAreaModelImpl extends BaseModelImpl<FarmerArea>
    implements FarmerAreaModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a farmer area model instance should use the {@link agrar.farmer.sbuilder.model.FarmerArea} interface instead.
     */
    public static final String TABLE_NAME = "agrar_farmer_FarmerArea";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "farmerId", Types.BIGINT },
            { "areaId", Types.BIGINT },
            { "description", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table agrar_farmer_FarmerArea (id_ LONG not null primary key,farmerId LONG,areaId LONG,description VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table agrar_farmer_FarmerArea";
    public static final String ORDER_BY_JPQL = " ORDER BY farmerArea.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY agrar_farmer_FarmerArea.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.agrar.farmer.sbuilder.model.FarmerArea"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.agrar.farmer.sbuilder.model.FarmerArea"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.agrar.farmer.sbuilder.model.FarmerArea"));
    private static ClassLoader _classLoader = FarmerArea.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            FarmerArea.class
        };
    private long _id;
    private long _farmerId;
    private long _areaId;
    private String _description;
    private FarmerArea _escapedModel;

    public FarmerAreaModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return FarmerArea.class;
    }

    @Override
    public String getModelClassName() {
        return FarmerArea.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("farmerId", getFarmerId());
        attributes.put("areaId", getAreaId());
        attributes.put("description", getDescription());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long farmerId = (Long) attributes.get("farmerId");

        if (farmerId != null) {
            setFarmerId(farmerId);
        }

        Long areaId = (Long) attributes.get("areaId");

        if (areaId != null) {
            setAreaId(areaId);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public long getFarmerId() {
        return _farmerId;
    }

    @Override
    public void setFarmerId(long farmerId) {
        _farmerId = farmerId;
    }

    @Override
    public long getAreaId() {
        return _areaId;
    }

    @Override
    public void setAreaId(long areaId) {
        _areaId = areaId;
    }

    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            FarmerArea.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public FarmerArea toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (FarmerArea) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FarmerAreaImpl farmerAreaImpl = new FarmerAreaImpl();

        farmerAreaImpl.setId(getId());
        farmerAreaImpl.setFarmerId(getFarmerId());
        farmerAreaImpl.setAreaId(getAreaId());
        farmerAreaImpl.setDescription(getDescription());

        farmerAreaImpl.resetOriginalValues();

        return farmerAreaImpl;
    }

    @Override
    public int compareTo(FarmerArea farmerArea) {
        long primaryKey = farmerArea.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof FarmerArea)) {
            return false;
        }

        FarmerArea farmerArea = (FarmerArea) obj;

        long primaryKey = farmerArea.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<FarmerArea> toCacheModel() {
        FarmerAreaCacheModel farmerAreaCacheModel = new FarmerAreaCacheModel();

        farmerAreaCacheModel.id = getId();

        farmerAreaCacheModel.farmerId = getFarmerId();

        farmerAreaCacheModel.areaId = getAreaId();

        farmerAreaCacheModel.description = getDescription();

        String description = farmerAreaCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            farmerAreaCacheModel.description = null;
        }

        return farmerAreaCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", farmerId=");
        sb.append(getFarmerId());
        sb.append(", areaId=");
        sb.append(getAreaId());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("agrar.farmer.sbuilder.model.FarmerArea");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>farmerId</column-name><column-value><![CDATA[");
        sb.append(getFarmerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>areaId</column-name><column-value><![CDATA[");
        sb.append(getAreaId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
